/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */
plugins {
	id "com.github.ben-manes.versions" version "0.20.0"
}
// define the group of the GAV
group = 'com.rajendarreddyj'

// define the version of the GAV
version = 1.0

description = "Root project of the Spring projects that uses Gradle."


allprojects {
	//Instructions for all projects
	ext {
		// compile/runtime dependency versions
		javaVersion="1.8"
		javaeeVersion = "8.0"
		javaxServletVersion = "4.0.1"
		springFrameworkVersion = "5.0.7.RELEASE"
	    springBatchVersion="4.0.1.RELEASE"
		springSecurityVersion = "5.0.6.RELEASE"
		springBootVersion = "2.0.3.RELEASE"
		springSessionVersion="1.3.3.RELEASE"
		hazelcastVersion = "3.10.3"
		commonsdbcpVersion="1.4"
		logbackVersion = "1.2.3"
	    aspectjVersion="1.9.1"
		toolingApiVersion = "3.3"
		guavaVersion = "25.1-jre"
		commonsLang3Version="3.7"
		commonsIOVersion="2.6"
		jacksonVersion="2.9.6"
		gsonVersion = "2.2.4"
		slf4jVersion = "1.7.25"
		groovyVersion = "2.4.5"
		junitVersion = "4.12"
		hamcrestVersion = "1.3"
		spockVersion = "1.0-groovy-2.4"
		equalsverifierVersion = "1.5.1"
		cglibVersion = "2.2"
		objenesisVersion = "1.2"
		hsqldbVersion="1.8.1.1"
		grettyPluginVersion ='2.0.0'
		tomcatPluginVersion='2.5'
		tomcatVersion='9.0.10'
		tomcatJuliLogVersion='9.0.0.M6'
	}

	// In this section you declare where to find the dependencies of your project
	repositories {
		// Use jcenter for resolving your dependencies.
		// You can declare any Maven/Ivy/file repository here.
		jcenter()
		mavenLocal()
		mavenCentral()
		maven {
			url "http://repo.maven.apache.org/maven2"
		}
	}

	buildscript {
		repositories {
			jcenter()
			mavenLocal()
			mavenCentral()
			maven {
				url "http://repo.maven.apache.org/maven2"
			}
		}
		dependencies {}
	}
}

subprojects {
	//Instructions for each sub project
	// Apply the java plugin to add support for Java
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'

	group = rootProject.group
	version = rootProject.version
	sourceCompatibility = "${javaVersion}"
	targetCompatibility = "${javaVersion}"
	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}

	dependencies {
		// The production code uses Guava
		compile "com.google.guava:guava:${guavaVersion}"
		
		// Use JUnit test framework
		testCompile "junit:junit:${junitVersion}"
	}

	configurations.all {
		it.exclude group: 'org.slf4j',	module: 'slf4j-log4j12'
		it.exclude group: 'org.slf4j',	module: 'slf4j-jdk14'
		it.exclude group: 'log4j',	module: 'log4j'
		//it.exclude group: 'commons-logging',	module: 'commons-logging'
	}

	configurations.all {
		resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
			failOnVersionConflict()

			// prefer modules that are part of this build (multi-project or composite build) over external modules
    		preferProjectModules()

            // force certain versions of dependencies (including transitive)
            //  *append new forced modules:
            
            
            //  *replace existing forced modules with new ones:
			forcedModules = [
				// spring framework force to latest version
				"org.springframework:spring-context:${springFrameworkVersion}",
    			"org.springframework:spring-aop:${springFrameworkVersion}",
    			"org.springframework:spring-beans:${springFrameworkVersion}",
				"org.springframework:spring-core:${springFrameworkVersion}",
				"org.springframework:spring-tx:${springFrameworkVersion}",
				// logback-classic uses logback 1.7.6
				"org.slf4j:slf4j-api:${slf4jVersion}",
				// junit uses hamcrest 1.1 
				"org.hamcrest:hamcrest-core:${hamcrestVersion}",
				// spock uses groovy 2.4.1 
				"org.codehaus.groovy:groovy-all:${groovyVersion}" 
			]
		}
	}

}

// Running 'gradle wrapper' will generate gradlew - Getting gradle wrapper working and using it will save you a lot of pain.
task wrapper(type: Wrapper) {
	gradleVersion = '4.9'
}

dependencyUpdates.resolutionStrategy {
	componentSelection { rules ->
		rules.all { ComponentSelection selection ->
			boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
				selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
			}
			if (rejected) {
				selection.reject('Release candidate')
			}
		}
	}
}
